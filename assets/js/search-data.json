{
  
    
        "post0": {
            "title": "Title",
            "content": "!pip install -U finance-datareader . Collecting finance-datareader Downloading finance_datareader-0.9.31-py3-none-any.whl (17 kB) Requirement already satisfied: lxml in /usr/local/lib/python3.7/dist-packages (from finance-datareader) (4.2.6) Requirement already satisfied: requests&gt;=2.3.0 in /usr/local/lib/python3.7/dist-packages (from finance-datareader) (2.23.0) Collecting requests-file Downloading requests_file-1.5.1-py2.py3-none-any.whl (3.7 kB) Requirement already satisfied: pandas&gt;=0.19.2 in /usr/local/lib/python3.7/dist-packages (from finance-datareader) (1.1.5) Requirement already satisfied: tqdm in /usr/local/lib/python3.7/dist-packages (from finance-datareader) (4.62.3) Requirement already satisfied: pytz&gt;=2017.2 in /usr/local/lib/python3.7/dist-packages (from pandas&gt;=0.19.2-&gt;finance-datareader) (2018.9) Requirement already satisfied: numpy&gt;=1.15.4 in /usr/local/lib/python3.7/dist-packages (from pandas&gt;=0.19.2-&gt;finance-datareader) (1.19.5) Requirement already satisfied: python-dateutil&gt;=2.7.3 in /usr/local/lib/python3.7/dist-packages (from pandas&gt;=0.19.2-&gt;finance-datareader) (2.8.2) Requirement already satisfied: six&gt;=1.5 in /usr/local/lib/python3.7/dist-packages (from python-dateutil&gt;=2.7.3-&gt;pandas&gt;=0.19.2-&gt;finance-datareader) (1.15.0) Requirement already satisfied: urllib3!=1.25.0,!=1.25.1,&lt;1.26,&gt;=1.21.1 in /usr/local/lib/python3.7/dist-packages (from requests&gt;=2.3.0-&gt;finance-datareader) (1.24.3) Requirement already satisfied: certifi&gt;=2017.4.17 in /usr/local/lib/python3.7/dist-packages (from requests&gt;=2.3.0-&gt;finance-datareader) (2021.5.30) Requirement already satisfied: idna&lt;3,&gt;=2.5 in /usr/local/lib/python3.7/dist-packages (from requests&gt;=2.3.0-&gt;finance-datareader) (2.10) Requirement already satisfied: chardet&lt;4,&gt;=3.0.2 in /usr/local/lib/python3.7/dist-packages (from requests&gt;=2.3.0-&gt;finance-datareader) (3.0.4) Installing collected packages: requests-file, finance-datareader Successfully installed finance-datareader-0.9.31 requests-file-1.5.1 . import pandas as pd . # 라이브러리의 version을 확인하고 싶을 때는 .__version__ 으로 확인합니다. import FinanceDataReader as fdr fdr.__version__ . &#39;0.9.31&#39; . # 주피터 노트북에서는 함수나 메소드의 괄호 안에서 shift + tab 키를 누르면 도움말을 볼 수 있습니다. fdr.StockListing?? fdr.DataReader?? . samsung_electronics = fdr.DataReader(&#39;005930&#39;, &#39;2021-06-30&#39;) hyundai_motors = fdr.DataReader(&#39;005380&#39;, &#39;2021-06-30&#39;) sk_telecom = fdr.DataReader(&#39;017670&#39;, &#39;2021-06-30&#39;) kakao = fdr.DataReader(&#39;035720&#39;, &#39;2021-06-30&#39;) . samsung_electronics[&quot;Close&quot;].plot() # plt.grid(True) . &lt;matplotlib.axes._subplots.AxesSubplot at 0x7f64d0a7b110&gt; . import matplotlib.pyplot as plt def dpc(company): company_dpc = (company[&#39;Close&#39;]-company[&#39;Close&#39;].shift(1)) / company[&#39;Close&#39;].shift(1) *100 company_dpc.iloc[0] = 0 company_dpc_cs = company_dpc.cumsum() return company_dpc_cs plt.plot(samsung_electronics.index, dpc(samsung_electronics), &#39;b&#39;, label=&#39;Samsung Electronics&#39;) plt.plot(hyundai_motors.index, dpc(hyundai_motors), &#39;g&#39;, label=&#39;Hyundai Motors&#39;) plt.plot(sk_telecom.index, dpc(sk_telecom), &#39;r&#39;, label=&#39;SK Telecom&#39;) plt.plot(kakao.index, dpc(kakao), &#39;y&#39;, label=&#39;KAKAO&#39;) plt.ylabel(&#39;Yield %&#39;) plt.grid(True) plt.legend(loc=&#39;best&#39;) plt.xticks(rotation=45) plt.show() . invest_df = pd.DataFrame(index=samsung_electronics.index, columns=[&#39;invest&#39;,&#39;samsung_electronics&#39;,&#39;hyundai_motors&#39;,&#39;sk_telecom&#39;,&#39;kakao&#39;]) dic = {1: &#39;samsung_electronics&#39;, 2: &#39;hyundai_motors&#39;, 3: &#39;sk_telecom&#39;, 4: &#39;kakao&#39;} . invest_df.loc[&#39;2021-06-30&#39;][&#39;invest&#39;] = 322500 invest_df.loc[&#39;2021-06-30&#39;][dic[3]] = 1 invest_df.loc[&#39;2021-07-12&#39;][&#39;invest&#39;] = 229500 invest_df.loc[&#39;2021-07-12&#39;][dic[2]] = 1 invest_df.loc[&#39;2021-07-12&#39;][&#39;invest&#39;] += 79800+79700 invest_df.loc[&#39;2021-07-12&#39;][dic[1]] = 2 invest_df.loc[&#39;2021-07-19&#39;][&#39;invest&#39;] = 79000 invest_df.loc[&#39;2021-07-19&#39;][dic[1]] = 1 invest_df.loc[&#39;2021-07-20&#39;][&#39;invest&#39;] = 78400 invest_df.loc[&#39;2021-07-20&#39;][dic[1]] = 1 invest_df.loc[&#39;2021-07-21&#39;][&#39;invest&#39;] = 310000+314500 invest_df.loc[&#39;2021-07-21&#39;][dic[3]] = 2 invest_df.loc[&#39;2021-07-21&#39;][&#39;invest&#39;] += 145000*2 invest_df.loc[&#39;2021-07-21&#39;][dic[4]] = 2 invest_df.loc[&#39;2021-07-22&#39;][&#39;invest&#39;] = 311000 invest_df.loc[&#39;2021-07-22&#39;][dic[3]] = 1 invest_df.loc[&#39;2021-07-22&#39;][&#39;invest&#39;] += 230500 invest_df.loc[&#39;2021-07-22&#39;][dic[2]] = 1 invest_df.loc[&#39;2021-07-23&#39;][&#39;invest&#39;] = 304500 invest_df.loc[&#39;2021-07-23&#39;][dic[3]] = 1 invest_df.loc[&#39;2021-07-26&#39;][&#39;invest&#39;] = 79100 invest_df.loc[&#39;2021-07-26&#39;][dic[1]] = 1 invest_df.loc[&#39;2021-07-26&#39;][&#39;invest&#39;] += 224000 invest_df.loc[&#39;2021-07-26&#39;][dic[2]] = 1 invest_df.loc[&#39;2021-07-28&#39;][&#39;invest&#39;] = 78600 invest_df.loc[&#39;2021-07-28&#39;][dic[1]] = 1 invest_df.loc[&#39;2021-07-30&#39;][&#39;invest&#39;] = 303500 invest_df.loc[&#39;2021-07-30&#39;][dic[3]] = 1 invest_df.loc[&#39;2021-08-27&#39;][&#39;invest&#39;] = 74100*4 invest_df.loc[&#39;2021-08-27&#39;][dic[1]] = 4 invest_df.loc[&#39;2021-09-08&#39;][&#39;invest&#39;] = 139000*2 invest_df.loc[&#39;2021-09-08&#39;][dic[4]] = 2 invest_df.loc[&#39;2021-09-09&#39;][&#39;invest&#39;] = 132000*2 invest_df.loc[&#39;2021-09-09&#39;][dic[4]] = 2 invest_df.loc[&#39;2021-09-17&#39;][&#39;invest&#39;] = 118000*2 invest_df.loc[&#39;2021-09-17&#39;][dic[4]] = 2 invest_df.loc[&#39;2021-09-17&#39;][&#39;invest&#39;] += 208000*3 invest_df.loc[&#39;2021-09-17&#39;][dic[2]] = 3 invest_df.loc[&#39;2021-09-23&#39;][&#39;invest&#39;] = 115000*2 invest_df.loc[&#39;2021-09-23&#39;][dic[4]] = 2 invest_df.loc[&#39;2021-09-27&#39;][&#39;invest&#39;] = 204000*2 invest_df.loc[&#39;2021-09-27&#39;][dic[2]] = 2 invest_df.loc[&#39;2021-09-29&#39;][&#39;invest&#39;] = 73800*5 invest_df.loc[&#39;2021-09-29&#39;][dic[1]] = 5 invest_df.loc[&#39;2021-09-29&#39;][&#39;invest&#39;] += 199500*2 invest_df.loc[&#39;2021-09-29&#39;][dic[2]] = 2 invest_df.loc[&#39;2021-10-01&#39;][&#39;invest&#39;] = 73600*5 invest_df.loc[&#39;2021-10-01&#39;][dic[1]] = 5 invest_df.loc[&#39;2021-10-22&#39;][&#39;invest&#39;] = -312000*6 invest_df.loc[&#39;2021-10-22&#39;][dic[3]] = -6 invest_df.loc[&#39;2021-10-25&#39;][&#39;invest&#39;] = 307000*6 invest_df.loc[&#39;2021-10-25&#39;][dic[3]] = 6 . invest_df=invest_df.fillna(0) . invest_df.head(100) . invest samsung_electronics hyundai_motors sk_telecom kakao . Date . 2021-06-30 322500 | 0 | 0 | 1 | 0 | . 2021-07-01 0 | 0 | 0 | 0 | 0 | . 2021-07-02 0 | 0 | 0 | 0 | 0 | . 2021-07-05 0 | 0 | 0 | 0 | 0 | . 2021-07-06 0 | 0 | 0 | 0 | 0 | . ... ... | ... | ... | ... | ... | . 2021-10-21 0 | 0 | 0 | 0 | 0 | . 2021-10-22 -1872000 | 0 | 0 | -6 | 0 | . 2021-10-25 1842000 | 0 | 0 | 6 | 0 | . 2021-10-26 0 | 0 | 0 | 0 | 0 | . 2021-10-27 0 | 0 | 0 | 0 | 0 | . 80 rows × 5 columns . invest_df = invest_df.cumsum() . invest_df . invest samsung_electronics hyundai_motors sk_telecom kakao . Date . 2021-06-30 322500 | 0 | 0 | 1 | 0 | . 2021-07-01 322500 | 0 | 0 | 1 | 0 | . 2021-07-02 322500 | 0 | 0 | 1 | 0 | . 2021-07-05 322500 | 0 | 0 | 1 | 0 | . 2021-07-06 322500 | 0 | 0 | 1 | 0 | . ... ... | ... | ... | ... | ... | . 2021-10-21 6787000 | 20 | 10 | 6 | 10 | . 2021-10-22 4915000 | 20 | 10 | 0 | 10 | . 2021-10-25 6757000 | 20 | 10 | 6 | 10 | . 2021-10-26 6757000 | 20 | 10 | 6 | 10 | . 2021-10-27 6757000 | 20 | 10 | 6 | 10 | . 80 rows × 5 columns . yield_per = round((samsung_electronics[&quot;Close&quot;]*invest_df[&quot;samsung_electronics&quot;] + hyundai_motors[&quot;Close&quot;]*invest_df[&quot;hyundai_motors&quot;] + sk_telecom[&quot;Close&quot;]*invest_df[&quot;sk_telecom&quot;] + kakao[&quot;Close&quot;]*invest_df[&quot;kakao&quot;]) /invest_df[&quot;invest&quot;]* 100 - 100, 2) yield_val = (samsung_electronics[&quot;Close&quot;]*invest_df[&quot;samsung_electronics&quot;] + hyundai_motors[&quot;Close&quot;]*invest_df[&quot;hyundai_motors&quot;] + sk_telecom[&quot;Close&quot;]*invest_df[&quot;sk_telecom&quot;] + kakao[&quot;Close&quot;]*invest_df[&quot;kakao&quot;]) -invest_df[&quot;invest&quot;] plt.plot(invest_df.index, yield_per , &#39;b&#39;, label=&#39;Yield&#39;) plt.ylabel(&#39;Yield %&#39;) plt.grid(True) plt.legend(loc=&#39;best&#39;) plt.xticks(rotation=45) # for i, v in enumerate(invest_df.index): idx = { y:x for x, y in zip(invest_df.index, yield_per) } idx_2 = { x:y for x, y in zip(invest_df.index, yield_val) } def get_key(val): for key, value in idx.items(): if val == value: return key def plot_text(x_pos, y_pos, per_val, yield_val): plt.text(x_pos, y_pos, per_val+&#39;% (&#39;+yield_val+&#39; WON)&#39;, # 좌표 (x축 = v, y축 = y[0]..y[1], 표시 = y[0]..y[1]) fontsize = 10, color=&#39;red&#39;, horizontalalignment=&#39;center&#39;, # horizontalalignment (left, center, right) verticalalignment=&#39;bottom&#39;) # verticalalignment (top, center, bottom) plot_text(idx[min(idx)], min(idx), str(min(idx)), str(format(idx_2[idx[min(idx)]], &#39;,&#39;))) plot_text(idx[max(idx)], max(idx), str(max(idx)), str(format(idx_2[idx[max(idx)]], &#39;,&#39;))) plot_text(min(idx.values()), get_key(min(idx.values())), str(get_key(min(idx.values()))), str(format(idx_2[min(idx.values())], &#39;,&#39;))) plot_text(max(idx.values()), get_key(max(idx.values())), str(get_key(max(idx.values()))), str(format(idx_2[max(idx.values())], &#39;,&#39;))) plt.show() . for i in range(len(yield_per)): print(invest_df.index[i],yield_per[i], yield_val[i]) . 2021-06-30 00:00:00 -0.78 -2500 2021-07-01 00:00:00 -2.33 -7500 2021-07-02 00:00:00 -1.24 -4000 2021-07-05 00:00:00 -1.4 -4500 2021-07-06 00:00:00 -1.71 -5500 2021-07-07 00:00:00 -2.48 -8000 2021-07-08 00:00:00 -1.71 -5500 2021-07-09 00:00:00 -0.16 -500 2021-07-12 00:00:00 0.62 4400 2021-07-13 00:00:00 0.51 3600 2021-07-14 00:00:00 -0.35 -2500 2021-07-15 00:00:00 0.17 1200 2021-07-16 00:00:00 0.01 100 2021-07-19 00:00:00 0.06 500 2021-07-20 00:00:00 -0.22 -1900 2021-07-21 00:00:00 -0.86 -15400 2021-07-22 00:00:00 -0.69 -16100 2021-07-23 00:00:00 -1.41 -37200 2021-07-26 00:00:00 -1.02 -30000 2021-07-27 00:00:00 -1.67 -49000 2021-07-28 00:00:00 -0.58 -17400 2021-07-29 00:00:00 -0.39 -11600 2021-07-30 00:00:00 -2.7 -89600 2021-08-02 00:00:00 -2.26 -74800 2021-08-03 00:00:00 -0.96 -31700 2021-08-04 00:00:00 -0.13 -4200 2021-08-05 00:00:00 -0.48 -16000 2021-08-06 00:00:00 -1.03 -34100 2021-08-09 00:00:00 -1.65 -54600 2021-08-10 00:00:00 -2.06 -68400 2021-08-11 00:00:00 -4.2 -139100 2021-08-12 00:00:00 -0.77 -25600 2021-08-13 00:00:00 -2.69 -89200 2021-08-17 00:00:00 -5.77 -191400 2021-08-18 00:00:00 -5.3 -175700 2021-08-19 00:00:00 -6.74 -223500 2021-08-20 00:00:00 -8.41 -278900 2021-08-23 00:00:00 -6.27 -207800 2021-08-24 00:00:00 -4.78 -158500 2021-08-25 00:00:00 -5.01 -165900 2021-08-26 00:00:00 -5.88 -195000 2021-08-27 00:00:00 -5.94 -214500 2021-08-30 00:00:00 -5.07 -183000 2021-08-31 00:00:00 -3.0 -108500 2021-09-01 00:00:00 -0.33 -12000 2021-09-02 00:00:00 -1.62 -58500 2021-09-03 00:00:00 -1.54 -55500 2021-09-06 00:00:00 -1.27 -46000 2021-09-07 00:00:00 -2.81 -101500 2021-09-08 00:00:00 -3.19 -124000 2021-09-09 00:00:00 -4.68 -194500 2021-09-10 00:00:00 -3.82 -158500 2021-09-13 00:00:00 -5.13 -213000 2021-09-14 00:00:00 -4.7 -195000 2021-09-15 00:00:00 -4.85 -201500 2021-09-16 00:00:00 -5.47 -227000 2021-09-17 00:00:00 -4.49 -225000 2021-09-23 00:00:00 -3.97 -208000 2021-09-24 00:00:00 -3.47 -182000 2021-09-27 00:00:00 -2.27 -128000 2021-09-28 00:00:00 -3.68 -208000 2021-09-29 00:00:00 -3.33 -213500 2021-09-30 00:00:00 -2.86 -183500 2021-10-01 00:00:00 -3.85 -261000 2021-10-05 00:00:00 -5.57 -378000 2021-10-06 00:00:00 -5.95 -404000 2021-10-07 00:00:00 -3.79 -257000 2021-10-08 00:00:00 -4.49 -305000 2021-10-12 00:00:00 -6.25 -424000 2021-10-13 00:00:00 -4.66 -316000 2021-10-14 00:00:00 -4.11 -279000 2021-10-15 00:00:00 -4.13 -280000 2021-10-18 00:00:00 -4.38 -297000 2021-10-19 00:00:00 -3.14 -213000 2021-10-20 00:00:00 -3.24 -220000 2021-10-21 00:00:00 -3.54 -240000 2021-10-22 00:00:00 -3.19 -157000 2021-10-25 00:00:00 -1.86 -126000 2021-10-26 00:00:00 -1.01 -68000 2021-10-27 00:00:00 -1.15 -78000 .",
            "url": "https://shin2712.github.io/blog/jupyter/investment/2021/10/26/_10_27_Investment_return_status.html",
            "relUrl": "/jupyter/investment/2021/10/26/_10_27_Investment_return_status.html",
            "date": " • Oct 26, 2021"
        }
        
    
  
    
        ,"post1": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://shin2712.github.io/blog/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://shin2712.github.io/blog/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://shin2712.github.io/blog/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://shin2712.github.io/blog/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}